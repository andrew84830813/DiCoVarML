% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proccessModel.R
\name{processModel}
\alias{processModel}
\title{Train and Compute Performance for the kth-Fold}
\usage{
processModel(
  train_x,
  train_y,
  test_x,
  test_y,
  test_ids,
  num_folds = 10,
  num_repeats = 5,
  ranger_ntrees = 750,
  ranger_mtry = 2,
  cvMethod = "repeatedcv",
  train_stackedModel = F,
  avgModelPrediction = T,
  metaLearner = "mlpML",
  ensembleModels = c("gbm", "xgbTree", "ranger", "rangerE", "pls")
)
}
\arguments{
\item{train_x}{samples by features matrix for model training}

\item{train_y}{training class labels}

\item{test_x}{test samples by feature matrix}

\item{test_y}{test class labels}

\item{test_ids}{row metadata for samples. Streamlines downstream analysis and further covariate concatenation}

\item{num_folds}{number of cross-validation folds for training models and hyper-parameter selection}

\item{num_repeats}{number of repeats for model train cross-validation}

\item{ranger_ntrees}{number of trees for random forest models (if applicable)}

\item{ranger_mtry}{usual random forest mtry parameter (if applicable)}

\item{cvMethod}{cross validation method. Should be a valid caret cross validation method}

\item{train_stackedModel}{Should a stacked ensemble be trained?}

\item{avgModelPrediction}{Should an average probability model be applied. Ensembles models together and in general improves performance.}

\item{metaLearner}{metalearner for stacked ensemble. Usually a neural net or glm (binary). Can be any valid caret model.}

\item{ensembleModels}{which models to train. Models that make up the ensemble(if applicable). Must be valid caret models.}
}
\value{
A list containing:\tabular{ll}{
   \code{performance} \tab data.frame with performance metrics on test data for each model and ensemble(if applicable). Metrics include: train-test AUC, MCC, Accuracy, etc.    \cr
   \tab \cr
   \code{roc_plotdata} \tab tidy data to plot roc curves for each model \cr
   \tab \cr
   \code{models} \tab caret model objects for each model trained  \cr
   \tab \cr
   }
}
\description{
General wrapper to train and compute performance for an entire fold (Train (model training) / Test (Held-out performance estimate)). This function compute the performance of each
model in the ensemble. Performance can be returned for each model and for optional average prob ensemble and stacked ensembles
}
